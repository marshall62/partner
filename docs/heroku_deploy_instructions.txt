Release Notes necessary to put a new ui or backend on heroku:

Flask Backend:

Any db changes in models.py need to be tested locally first with
venv
flask db migrate
flask db upgrade


Release to heroku

git add files
git commit -m "comment"
git push heroku master

To login to heroku (first, before below)
https://id.heroku.com/login

Have 2 apps that relate to this
flask_pairup
pairup_dm

Issues/TODOs:

heroku pg:info info about the db
heroku pg:reset drop the db (did this when things were messed up with migrations)

Make sure there is an instructor user/pw:

Use a REST tool like postman to create:
POST https://flask-pairup.herokuapp.com/rest/create-instructor 
   email: goober
   password: blee

GET https://flask-pairup.herokuapp.com/rest/check-instructor?email=goober

Note this will work for marshall62@gmail.com

DELETE https://flask-pairup.herokuapp.com/delete-instructor
  email: goober


Need to make sure the environment variable FLASK_ENV is set to production

The config of the app is handled in partner/__init__.py and will come from the object config.ProductionConfig


Files that are currently somewhat dependent on environment:
partner/__init__.py:  Sets up CORS hosts that the backend is willing to accept requests from (e.g. heroku and localhost) 
The database URL is also fetched here.  I think that I set an environment variable in heroku that points to postgres.
If there is not env var set, it pulls the database url from config.cfg (which points to my local sqlite db)


-------------------------------------------------------------

UI:


manually edit .env so that it points to  https://flask-pairup.herokuapp.com/
USE_CORS (which is currently working) must be true
git add files
git commit -m "comment"
git push heroku master


Issues/TODOs:

Communication with backend has two general options (see urls.js)
Use CORS:  Make requests to backend with full URLs like https://flask-pairup.herokuapp.com/rest/login-user
Use proxy: Make requests to backend with partial URL like /api/rest/login-user

Issues to resolve:
CORS:  host in dev environment is diff from heroku.  Need to obtain from config file.  The react server on heroku 
runs in development mode which means it loads the .env file to obtain the host and USE_CORS flag.  This means I have to 
manually edit the .env file before pushing to heroku.

Proxying works well in dev environment where there is a setupProxy.js file that specifies the URL OR I can add a proxy to
package.json.  Both have worked but setupProxy is better because it can take the URL host from the .env file whereas package.json 
has a fixed proxy value that must change for dev or heroku.  
Because react runs as mode=development on heroku I have to hand-edit .env.  To get it to read .env.production I have to run
react differently.  I began to figure it out.  It involves using a server.js file and changing how package.json starts node and react.
This correctly runs it in production mode, but then the proxying failed to work probably because that server.js is not right.


---------------------------------

Deploying My Flask/React web app to Heroku

Currently I run my Flask app on localhost:5000 and my react app on localhost:3000. 
I have one script that launches them both by first entering my venv and starting flask and then 
going to my react directory and starting the react server (which was created with create-react-app)
#!/bin/bash
source venv/bin/activate
flask run&
deactivate
cd ~/dev/react/pairup
npm start&

-  Get a Heroku CLI app (get Heroku acct, install CLI, login first)
sudo snap install --classic heroku
heroku login

- Create the flask app on heroku
heroku apps:create flask-pairup

gives back:
https://flask-pairup.herokuapp.com/ | https://git.heroku.com/flask-pairup.git

git -v // see the heroku git repos.

- Create postgres db on heroku
Need to use a non-file-based DB because Heroku wipes the virtual file system frequently.

heroku addons:add heroku-postgresql:hobby-dev

-Address of the db is stored in the environment variable DATABASE_URL.
Make sure that the flask app uses this envvar rather than its default SQLALCHEMY_DATABASE_URI set in the config file.

Change __init__.py to have:

dburl = os.environ.get('DATABASE_URL')
# prefer the environment db url so I can use other dbs in production
if dburl:
    app.config['SQLALCHEMY_DATABASE_URI'] = dburl

- Add gunicorn and psycopg2-binary to venv and requirements.txt

pip install gunicorn psycopg2-binary
pip freeze > requirements.txt


- Set the FLASK_APP in heroku
heroku config:set FLASK_APP=partner.py

- Create the Procfile in partner/Procfile with the line:
web: flask db upgrade; flask translate compile; gunicorn microblog:app

- make sure that I have run local db migrations with 
flask db migrate 
flask db upgrade
commit the migration folder and contents to github (heroku takes these files rather than creating own version)

- Push the repo to heroku
> git push heroku master

The partner app is now running on heroku and can be tested at:
https://flask-pairup.herokuapp.com/

Failure can be troubleshooted by logs

heroku logs --tail

Redeploy process:
Make local changes.
git push heroku master
test https://flask-pairup.herokuapp.com/hello

To test the database is working:
Use a REST client like ARC:

Send a POST request like: https://flask-pairup.herokuapp.com/test-insert
content-type: multipart-form
body: fname: david
      lname: marshall

Should receive:
{
"first_name": "david",
"id": "3",
"last_name": "marshall"
}

https://flask-pairup.herokuapp.com/test-get?id=3
{
"first_name": "david",
"id": "3",
"last_name": "marshall"
}

N.B.  I've had to manually edit my .git/config file so that git push heroku master works 
[remote "heroku"]
	url = https://git.heroku.com/flask-pairup.git
	fetch = +refs/heads/*:refs/remotes/heroku/*	



-----------------------------------------------------------

React pairup-ui to heroku:

Create the heroku app as above pairup-ui.

add two new files to root of pairup
.env
  REACT_APP_BACKEND_URI=http://localhost:5000

.env.production

 REACT_APP_BACKEND_URI=https://flask-pairup.herokuapp.com

Modify urls.js

export class URLs {
    static host = process.env.REACT_APP_BACKEND_URI;
    static pre = URLs.host + "/rest/";

Modify flask partner/__init__.py
CORS(app, resources={r"/rest/*": {"origins": ["http://localhost:3000", "https://flask-pairup.herokuapp.com"], "supports_credentials": True}})


React will read the .env file when starting in dev using npm start and the .env.production when running
on heroku with npm build

The CORS have been configured in flask to accept requests from the heroku react client.

The Procfile for react is not necessary.
I followed: https://blog.heroku.com/deploying-react-with-zero-configuration
heroku create -b https://github.com/marshall62/pairup.git
git push heroku master
heroku open
or 
https://pairup-dm.herokuapp.com/

And I get errors....

The https protocol appears to be problematic. 
I built a basic react app which is created using the bootstrapping.  (dev/react/basic).  I deploy to heroku and find that it will
not correctly show in browser until I change its URL to http://basic-dm.herokuapp.com/

Now to test that it can communicate with my backend I add some input fields and buttons for GET and POST.
I configure a proxy in the package.json like "proxy": "http://localhost:5000"
I use this in my dev environment and find that the basic react app can send these requests to my flask backend.
However when I deploy to heroku this fails with error "Invalid Host Header"  I see that this may be because 
heroku is requiring a newwer way to proxy as described here: https://stackoverflow.com/questions/49165232/reactjs-app-in-heroku-invalid-host-header-host-configuration

In ui did:
npm install http-proxy-middleware --save
created setupProxy.js in /src dir  contents looks like:

const proxy = require("http-proxy-middleware");

module.exports = function(app) {
  app.use(
    proxy(["/api"], { target: "http://localhost:5000" })
  );
};

This required changing the routes in my backend to be /api/test-insert and /api/test-get

Remove the "proxy": "http..." from package.json because the setupProxy.js .  This works locally.

Now deploy the react app with this form of proxying.






